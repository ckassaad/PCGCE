c <- ccf(x,y)
c
c$type
c$n.used
c$lag
c$series
c
c$snames
x*y
dim(x*y)
dim(x*y)
length(x*y)
length(x)
length(x*y)
z <- x*y
a <- acf(z)
a
a$acf
c$acf
a$acf
c$acf
a$acf
c$acf
a <- acf(z, lag.max = length(x)-1)
a$acf
c$acf
c <- ccf(x,y)
a <- acf(z, lag.max = length(x)-1)
a <- acf(z)
c <- ccf(x,y)
a$acf
a <- acf(z)
c$series
c$lag
a <- acf(ts.union(x,y))
x
y
ts.union(x,y)
ts.union(x,y)
ts.union(x,y)
x
cbind(x,y)
a <- acf(cbind(x,y))
a <- acf(cbind(x,y))
c <- ccf(x,y)
a <- acf(cbind(x,y))
a$acf
c <- ccf(x,y)
a <- acf(cbind(x,y))
a$acf
c$acf
a$acf
c <- ccf(x,y)
c$acf
a$acf
a$acf
a <- acf(cbind(x,y))
a$acf["x"]
a$acf
c$acf
a$lag
a$acf
c$acf
c$acf[,,2]
c$acf[2]
c$acf[,2]
c$acf[2]
c$acf
a$acf[,2]
a$acf[,,2]
a$acf[,,1]
a$acf[,,1,2]
a$acf[,,1][,2]
a$acf[,,1][,2]
a$acf[,,2][,1]
rev(a$acf[,,1][,2])
c1 <- rev(a$acf[,,1][,2])
c2 <- a$acf[,,2][,1]
rbind(c1,c2)
cbind(c1,c2)
c(c1,c2)
c$acf
length(c(c1,c2))
c$acf
length(c(c1,c2))
c1
c2
c1 <- rev(a$acf[,,1][,2])
a$acf[,,1][,2]
a$acf[,,2][,1]
a$acf
c1
c2
c2[2:]
c2[-1]
c(c1,c2[-1])
c$acf
length(c(c1,c2[-1]))
10*log(10)(1000/2)
log(10)
10*log(10)*(1000/2)
10*log(10)
10*log(10)*(2/1000)
10*log(10)
10*log(10*(2/1000))
10*log(10*(2/1000))
10*log(10*(1000/2))
10*log(10*(1000/2))
10*log(10)
10*log(10)*(1000/2)
10*log(10*(1000/2))
10*log(10*(1000/2))/2
10*log((1000/2))
10*log(1000/2)
1000/2
log10(1000/2)
10*log10(1000/2)
10*log10(1000/2)
10*log10(1000/2)
round(10*log10(1000/2))
floor(10*log10(1000/2))
floor(10*log10(1000/2))
c$lag
round(10*log10(1000/2))
c$acf
c <- ccf(x,cbind(y,w))
c <- ccf(x,w)
c
c <- ccf(x,y)
getAnywhere(C_acf)
round(10*log10(1000/2))
c$acf
x.mean()
mean(x)
mean(y)
var(x)
var(y)
n <- 10000
w <- rep(0,n)
x <- rep(0,n)
y <- rep(0,n)
epsw <- rnorm(n)^3
epsx <- rnorm(n)^3
epsy <- rnorm(n)^3
for(i in 3:n)
{
x[i] <- 0.3*x[i-1]+0.5*epsx[i]
y[i] <- 0.8*y[i-1]+0.8*x[i-1]+0.5*epsy[i]
w[i] <- -0.6*w[i-1]+0.8*x[i-2]+0.5*epsw[i]
}
mean(x)
n <- 100000
w <- rep(0,n)
x <- rep(0,n)
y <- rep(0,n)
epsw <- rnorm(n)^3
epsx <- rnorm(n)^3
epsy <- rnorm(n)^3
for(i in 3:n)
{
x[i] <- 0.3*x[i-1]+0.5*epsx[i]
y[i] <- 0.8*y[i-1]+0.8*x[i-1]+0.5*epsy[i]
w[i] <- -0.6*w[i-1]+0.8*x[i-2]+0.5*epsw[i]
}
mean(x)
mean(y)
var(x)
var(y)
c <- ccf(x,y)
c$acf
n <- 1000000
w <- rep(0,n)
x <- rep(0,n)
y <- rep(0,n)
epsw <- rnorm(n)^3
epsx <- rnorm(n)^3
epsy <- rnorm(n)^3
for(i in 3:n)
{
x[i] <- 0.3*x[i-1]+0.5*epsx[i]
y[i] <- 0.8*y[i-1]+0.8*x[i-1]+0.5*epsy[i]
w[i] <- -0.6*w[i-1]+0.8*x[i-2]+0.5*epsw[i]
}
mean(x)
mean(y)
var(y)
var(x)
c <- ccf(x,y)
round(10*log10(1000000/2))
c <- ccf(x,y)
c$acf
n <- 1000000
w <- rep(0,n)
x <- rep(0,n)
y <- rep(0,n)
epsw <- rnorm(n)^3
epsx <- rnorm(n)^3
epsy <- rnorm(n)^3
for(i in 3:n)
{
x[i] <- 0.3*x[i-1]+0.5*epsx[i]
y[i] <- 0.8*y[i-1]+0.8*x[i-1]+0.5*epsy[i]
w[i] <- -0.6*w[i-1]+0.8*x[i-2]+0.5*epsw[i]
}
c <- ccf(x,y)
y
c$acf
c <- ccf(x,y)
c$acf
a <- acf(cbind(x,y))
a
a <- acf(cbind(x,y))
a
1 %*% 1
1.0 %*% 1.2
1.0 * 1.2
ceiling(3.2)
eps = y
alpha = 0.05
max_lag = 10
corr1 <- ccf(x,eps,lag.max=max_lag,type = "correlation",plot = FALSE)
T <- max(abs(corr1$acf))
T
sigma <- matrix(0,2*max_lag,2*max_lag)
sigma
max_lag = 5
corr1 <- ccf(x,eps,lag.max=max_lag,type = "correlation",plot = FALSE)
T <- max(abs(corr1$acf))
sigma <- matrix(0,2*max_lag,2*max_lag)
T
acr <- acf(x,lag.max=2*max_lag,type = "correlation",plot=FALSE)
for(i in 1:(2*max_lag))
{
for(j in 1:i)
{
sigma[i,j]=acr$acf[1+(i-j)]
sigma[j,i]=acr$acf[1+(i-j)]
}
}
sigma <- sigma/length(x)
R <- chol(sigma)
R
num_simulations<-20000
z <- matrix(rnorm(2*max_lag*num_simulations),num_simulations,2*max_lag)
z <- z%*%R
z
maxz <- apply(abs(z),1,max)
maxz
z
maxz
abs(z)
maxz
length(maxz)
T
quan <- maxzorder[ceiling(num_simulations-alpha*num_simulations)]
quan
quan <- maxzorder[ceiling(num_simulations-alpha*num_simulations)]
maxzorder <- sort(maxz)
quan <- maxzorder[ceiling(num_simulations-alpha*num_simulations)]
quan
sum(maxzorder>T)
sum(maxzorder>T)/num_simulations
resu <- list(statistic = T, crit.value = quan, p.value = pval)
resu
pval <- sum(maxzorder>T)/num_simulations
resu <- list(statistic = T, crit.value = quan, p.value = pval)
resu
corr1 <- ccf(x,eps,lag.max=max_lag,type = "correlation",plot = FALSE)
T <- max(abs(corr1$acf))
sigma <- matrix(0,2*max_lag,2*max_lag)
# estimate cov of x-cor.
# Theorem 11.2.3 in brockwell and davis: "bartletts formula"
# H_0: rho_{12} == 0 => non-zero summands only for j = k - h
acr <- acf(x,lag.max=2*max_lag,type = "correlation",plot=FALSE)
for(i in 1:(2*max_lag))
{
for(j in 1:i)
{
sigma[i,j]=acr$acf[1+(i-j)]
sigma[j,i]=acr$acf[1+(i-j)]
}
}
sigma <- sigma/length(x)
R <- chol(sigma)
num_simulations<-20000
z <- matrix(rnorm(2*max_lag*num_simulations),num_simulations,2*max_lag)
z <- z%*%R
maxz <- apply(abs(z),1,max)
maxzorder <- sort(maxz)
quan <- maxzorder[ceiling(num_simulations-alpha*num_simulations)]
pval <- sum(maxzorder>T)/num_simulations
resu <- list(statistic = T, crit.value = quan, p.value = pval)
resu
n <- 10000
w <- rep(0,n)
x <- rep(0,n)
y <- rep(0,n)
epsw <- rnorm(n)^3
epsx <- rnorm(n)^3
epsy <- rnorm(n)^3
for(i in 3:n)
{
x[i] <- 0.3*x[i-1]+0.5*epsx[i]
y[i] <- 0.8*y[i-1]+0.8*x[i-1]+0.5*epsy[i]
w[i] <- -0.6*w[i-1]+0.8*x[i-2]+0.5*epsw[i]
}
x
eps = y
alpha = 0.05
max_lag = 5
corr1 <- ccf(x,eps,lag.max=max_lag,type = "correlation",plot = FALSE)
T <- max(abs(corr1$acf))
sigma <- matrix(0,2*max_lag,2*max_lag)
# estimate cov of x-cor.
# Theorem 11.2.3 in brockwell and davis: "bartletts formula"
# H_0: rho_{12} == 0 => non-zero summands only for j = k - h
acr <- acf(x,lag.max=2*max_lag,type = "correlation",plot=FALSE)
for(i in 1:(2*max_lag))
{
for(j in 1:i)
{
sigma[i,j]=acr$acf[1+(i-j)]
sigma[j,i]=acr$acf[1+(i-j)]
}
}
sigma <- sigma/length(x)
R <- chol(sigma)
num_simulations<-20000
z <- matrix(rnorm(2*max_lag*num_simulations),num_simulations,2*max_lag)
z <- z%*%R
maxz <- apply(abs(z),1,max)
maxzorder <- sort(maxz)
quan <- maxzorder[ceiling(num_simulations-alpha*num_simulations)]
pval <- sum(maxzorder>T)/num_simulations
resu <- list(statistic = T, crit.value = quan, p.value = pval)
resu
max(c(1,3,4))
max(c(1,3,4))
max(c(1,3,4))
max(c(1,3,4),1)
max(c(1,3,4),2)
max(c(1,3,4),10)
x<- cumsum(rnorm(100))
y <- cumsum(rnorm(100))
z <- sin(seq(0, pi, length.out=100))
## Compute the distance and check for coherent results
diss.CORT(x, y, 2)
install.packages("TSclust")
library(TSclust)
## Compute the distance and check for coherent results
library(tsclust)
## Compute the distance and check for coherent results
library(diss)
## Compute the distance and check for coherent results
library(TSclust)
setwd('/home/kassaad/Documents/Codes/Causality-time-series-different-sampling-rate/data/fMRI_processed_by_Nauta/returns/small_datasets')
filenames <- list.files("./", pattern="*.csv")
for (i in 1:length(filenames)){
data = read.csv(filenames[i], header = FALSE)
# traints_linear, traints_gam or traints_gp
# indtestts_hsic or indtestts_crosscov
timino_graph <- timino_dag(data, alpha = 0.05, max_lag = 5, model = traints_linear, indtest = indtestts_crosscov, output = TRUE)
unit_graph <- diag(nrow(timino_graph))
unit_graph[is.na(timino_graph)] <- 3
timino_graph[is.na(timino_graph)] <- 3
for (j1 in 1:nrow(timino_graph)){
for (j2 in 1:nrow(timino_graph)){
if (timino_graph[j1,j2] == 1){
unit_graph[j1,j2] <- 2
unit_graph[j2,j1] <- 1
}
}
}
for (j1 in 1:nrow(timino_graph)){
for (j2 in 1:nrow(timino_graph)){
if (timino_graph[j1,j2] == 3){
unit_graph[j2,j1] = 1
}
}
}
print(unit_graph)
path<-paste("../results/res_",filenames[i],sep="")
write.csv(unit_graph,path)
}
library(gam)
library(kernlab)
library(gptk)
setwd('/home/kassaad/Documents/Codes/Causality-time-series-different-sampling-rate/baselines/onlineCodeTimino/codeTimino')
source("granger_causality.R")
source("timino_causality.R")
source("./util/hammingDistance.R")
source("./util/indtestAll.R")
source("./util/indtestHsic.R")
source("./util/indtestPcor.R")
source("./util/TSindtest.R")
source("./util/fitting_ts.R")
setwd('/home/kassaad/Documents/Codes/Causality-time-series-different-sampling-rate/data/fMRI_processed_by_Nauta/returns/small_datasets')
filenames <- list.files("./", pattern="*.csv")
for (i in 1:length(filenames)){
data = read.csv(filenames[i], header = FALSE)
# traints_linear, traints_gam or traints_gp
# indtestts_hsic or indtestts_crosscov
timino_graph <- timino_dag(data, alpha = 0.05, max_lag = 5, model = traints_linear, indtest = indtestts_crosscov, output = TRUE)
unit_graph <- diag(nrow(timino_graph))
unit_graph[is.na(timino_graph)] <- 3
timino_graph[is.na(timino_graph)] <- 3
for (j1 in 1:nrow(timino_graph)){
for (j2 in 1:nrow(timino_graph)){
if (timino_graph[j1,j2] == 1){
unit_graph[j1,j2] <- 2
unit_graph[j2,j1] <- 1
}
}
}
for (j1 in 1:nrow(timino_graph)){
for (j2 in 1:nrow(timino_graph)){
if (timino_graph[j1,j2] == 3){
unit_graph[j2,j1] = 1
}
}
}
print(unit_graph)
path<-paste("../results/res_",filenames[i],sep="")
write.csv(unit_graph,path)
}
setwd('/home/kassaad/Documents/Codes/Causality-time-series-different-sampling-rate/data/fMRI_processed_by_Nauta/returns/small_datasets')
filenames <- list.files("./", pattern="*.csv")
for (i in 1:length(filenames)){
data = read.csv(filenames[i], header = FALSE)
# traints_linear, traints_gam or traints_gp
# indtestts_hsic or indtestts_crosscov
timino_graph <- timino_dag(data, alpha = 0.05, max_lag = 5, model = traints_linear, indtest = indtestts_crosscov, output = TRUE)
unit_graph <- diag(nrow(timino_graph))
unit_graph[is.na(timino_graph)] <- 3
timino_graph[is.na(timino_graph)] <- 3
for (j1 in 1:nrow(timino_graph)){
for (j2 in 1:nrow(timino_graph)){
if (timino_graph[j1,j2] == 1){
unit_graph[j1,j2] <- 2
unit_graph[j2,j1] <- 1
}
}
}
for (j1 in 1:nrow(timino_graph)){
for (j2 in 1:nrow(timino_graph)){
if (timino_graph[j1,j2] == 3){
unit_graph[j2,j1] = 1
}
}
}
print(unit_graph)
path<-paste("../results_timino/res_",filenames[i],sep="")
write.csv(unit_graph,path)
}
setwd('/home/kassaad/Documents/Codes/Causality-time-series-different-sampling-rate/data/fMRI_processed_by_Nauta/returns/small_datasets')
filenames <- list.files("./", pattern="*.csv")
for (i in 1:length(filenames)){
data = read.csv(filenames[i], header = FALSE)
# traints_linear, traints_gam or traints_gp
# indtestts_hsic or indtestts_crosscov
timino_graph <- timino_dag(data, alpha = 0.05, max_lag = 5, model = traints_linear, indtest = indtestts_crosscov, output = TRUE)
unit_graph <- diag(nrow(timino_graph))
unit_graph[is.na(timino_graph)] <- 3
timino_graph[is.na(timino_graph)] <- 3
for (j1 in 1:nrow(timino_graph)){
for (j2 in 1:nrow(timino_graph)){
if (timino_graph[j1,j2] == 1){
unit_graph[j1,j2] <- 2
unit_graph[j2,j1] <- 1
}
}
}
for (j1 in 1:nrow(timino_graph)){
for (j2 in 1:nrow(timino_graph)){
if (timino_graph[j1,j2] == 3){
unit_graph[j2,j1] = 1
}
}
}
print(unit_graph)
path<-paste("/results_timino/res_",filenames[i],sep="")
write.csv(unit_graph,path)
}
setwd('/home/kassaad/Documents/Codes/Causality-time-series-different-sampling-rate/data/fMRI_processed_by_Nauta/returns/small_datasets')
filenames <- list.files("./", pattern="*.csv")
for (i in 1:length(filenames)){
data = read.csv(filenames[i], header = FALSE)
# traints_linear, traints_gam or traints_gp
# indtestts_hsic or indtestts_crosscov
timino_graph <- timino_dag(data, alpha = 0.05, max_lag = 5, model = traints_linear, indtest = indtestts_crosscov, output = TRUE)
unit_graph <- diag(nrow(timino_graph))
unit_graph[is.na(timino_graph)] <- 3
timino_graph[is.na(timino_graph)] <- 3
for (j1 in 1:nrow(timino_graph)){
for (j2 in 1:nrow(timino_graph)){
if (timino_graph[j1,j2] == 1){
unit_graph[j1,j2] <- 2
unit_graph[j2,j1] <- 1
}
}
}
for (j1 in 1:nrow(timino_graph)){
for (j2 in 1:nrow(timino_graph)){
if (timino_graph[j1,j2] == 3){
unit_graph[j2,j1] = 1
}
}
}
print(unit_graph)
path<-paste("./results_timino/res_",filenames[i],sep="")
write.csv(unit_graph,path)
}
